#!/usr/bin/env node
'use strict';

var Liftoff   = require('liftoff');
var interpret = require('interpret');
var program = require('commander');
var fs = require('fs');
var templates = require('../templates/index');
var readline = require('readline');
var argv = require('minimist')(process.argv.slice(2));
var chalk = require('chalk');
var _ = require('lodash');
var Migrator = require('../migrate/migrator');
var fs = require('fs');
var repl = require("repl");
var util = require('util');
var npdynamod = require('../../index');

function padDate(t){
  if(t < 10) t = "0"+t.toString();
  return t;
}

function exitWithError(text) {
  console.error(chalk.red(text));
  process.exit(1);
}

function exit(text) {
  if(text) {
    console.log(text);
  }
  process.exit(0);
}

var npdfile;

function npdFile(){
  npdfile = npdfile || require(process.cwd() + "/npdfile");
  return npdfile;
}

function migrationFilePath(){
  var _migrationFilePath = (npdFile().migration && npdFile().migration.migrationFilePath) ? npdFile().migration.migrationFilePath : 'migrations'
  return process.cwd() + '/' + _migrationFilePath;
}

function npdAA(){
  return fs.readFileSync(__dirname + '/../templates/npd_aa.stub', 'utf-8');
}

function checkNpdfileExists(){
  if(!fs.existsSync(process.cwd() + "/npdfile.js")){
    console.error(chalk.red("npdfile.js was not found. Please type `npd init` to create npdfile.js"));
    process.exit(1);
  }
}

function inspect(data){
  return util.inspect(data, {depth: null });
}

function initCli(){
  var env = program.env || argv.e || 'development';

  if(argv.e) {
    var name = program.args[0]._name;
    if(name) {
      console.log(chalk.yellow('DEPRECATION WARNING') + ': npd: using `' + name+ '` with a `-e` option is deprecated!');
    }
  }
  checkNpdfileExists();
  var config = npdFile()[env];

  if(!config) {
    exitWithError(env + ' is not specified environemnt.');
  }
  config.env = env;
  config.cwd = migrationFilePath();

  console.log("Environment: " + chalk.yellow(config.env));

  return new Promise(function(resolve){
    resolve(config);
  });
}

function initialize(){
  program
    .version(require('../../package.json').version)
    .option('--env [value]', 'Specify the environment to run command.')
  ;

  program
  .command('init')
  .description('        Create a fresh npdfile.')
  .action(function() {
    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    var npdPath = process.cwd() + "/npdfile.js";

    if(fs.existsSync(npdPath)){
      rl.question('Npdfile is already existed. Do you want to overwrite it? [Y/n]', function(answer) {
        if(answer.toLowerCase() == 'y'){
          fs.writeFileSync(npdPath, templates.npdfile);
          exit(chalk.yellow('Overwrote the npdfile.'));
        }
        rl.close();
      });

    }else{
      fs.writeFileSync(npdPath, templates.npdfile);
      exit(
        [
          "\n",
          chalk.cyan('Created npdfile.js'),
          "\n",
          npdAA(),
          "\n",
          "Thanks for installing npdynamodb! \n",
          "--------------------------------------------------------",
          "HomePage: " + chalk.underline('https://github.com/noppoMan/npdynamodb'),
          "Documantation: " + chalk.underline('https://goo.gl/NgH8TT'),
          "Issues: " + chalk.underline('https://goo.gl/KdxAuc'),
          "Contact: Noppoman <yuki@miketokyo.com>",
          "--------------------------------------------------------\n",
          "Enjoy hack with npdynamodb!\n"
        ].join("\n")
      );
    }

  });

  program
  .command('migrate:generate <name>')
  .description('       Create a named migration file.')
  .action(function(name) {
    var migrationDir = migrationFilePath();

    if(!fs.existsSync(migrationDir)){
      fs.mkdirSync(migrationDir);
    }

    var d = new Date();
    var migrateFileParts = [
      d.getUTCFullYear(),
      padDate(d.getUTCMonth()+1),
      padDate(d.getUTCDate()+1),
      padDate(d.getUTCHours()),
      padDate(d.getUTCMinutes()),
      padDate(d.getUTCSeconds()),
      '_',
      name,
      '.js'
    ];

    var fPath = migrationDir+'/'+migrateFileParts.join('');
    fs.writeFileSync(fPath, templates.generator);
    exit('Created ' + fPath);
  });

  program
  .command('migrate:run')
  .option('-e, --environment [value]', 'Specify the environment to run.')
  .description('       Run all migrations that have not yet been run.')
  .action(function() {
    return initCli().then(function(config){
      return new Migrator.Runner(config).run().then(function(data){
        if(data.length === 0) {
          exit(chalk.cyan("Already up to date"));
        }else{
          exit(chalk.cyan(data.map(function(path){ return "Migrated" + path; }).join("\n")));
        }
      });
    }).catch(exitWithError);
  });

  program
  .command('migrate:rollback')
  .option('-e, --environment [value]', 'Specify the environment to run.')
  .description('       Rollback the last set of migrations performed.')
  .action(function() {
    return initCli().then(function(config){
      return new Migrator.Runner(config).rollback().then(function(data){
        if(!data) {
          return exit(chalk.cyan('There is no rollbackable generation.'));
        }
        exit(chalk.cyan('Rollbacked ' + data));
      });
    }).catch(exitWithError);
  });

  program
  .command('listTables')
  .option('-e, --environment [value]', 'Specify the environment to run.')
  .description('      list all tables')
  .action(function() {
    return initCli().then(function(config){
      var npd = npdynamod.createClient(config.dynamoClient, config.options);

      return npd().showTables().then(function(tables){
        exit(tables.TableNames.join("\n"));
      });
    }).catch(exitWithError);
  });

  program
  .command('dump <table>')
  .option('-e, --environment [value]', 'Specify the environment to run.')
  .description('       Dump specified table contents.')
  .action(function(table) {
    return initCli().then(function(config){
      var npd = npdynamod.createClient(config.dynamoClient, config.options);

      return npd().table(table).all().then(function(data){
        exit(inspect(data));
      });
    }).catch(exitWithError);
  });

  program
  .command('desc <table>')
  .description('       Show result of the describe operation')
  .action(function(table) {
    return initCli().then(function(config){
      var npd = npdynamod.createClient(config.dynamoClient, config.options);

      return npd().table(table).describe().then(function(data){
        exit(inspect(data));
      });
    }).catch(exitWithError);
  });

  program
  .command('get <table> <hashKey> [rangeKey]')
  .description('       Show results of the query operation')
  .action(function(table, hashKey, rangeKey) {
    return initCli().then(function(config){
      var npd = npdynamod.createClient(config.dynamoClient, config.options);
      return npd().table(table).describe().then(function(data){

        var hashKeyName = data.Table.KeySchema[0].AttributeName,
          rangeKeyName = data.Table.KeySchema[1].AttributeName
        ;

        var query = npd().table(table).where(hashKeyName, hashKey);
        if(rangeKeyName && rangeKey) {
          query.where(rangeKeyName, rangeKey);
        }

        return query.then(function(result){
          exit(inspect(result));
        });
      });
    }).catch(exitWithError);
  });

  program
  .command('dropTable <table>')
  .description('       Drop the specified table.')
  .action(function(table, hashKey, rangeKey) {
    return initCli().then(function(config){
      var npd = npdynamod.createClient(config.dynamoClient, config.options);
      return npd().table(table).deleteTable().then(function(result){
        exit(inspect(result));
      });
    }).catch(exitWithError);
  });

  program.parse(process.argv);

  if(argv._.length === 0 || !_.last(program.args)._name) {
    program.help();
  }
}

var cli = new Liftoff({
  name: 'npd',
  extensions: interpret.jsVariants,
  v8flags: require('v8flags')
});

cli.launch({
  cwd: argv.cwd,
  configPath: argv.knexfile,
  require: argv.require,
  completion: argv.completion
}, initialize);
